{
	"name": "CovidMetrics",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CovidMetrics",
						"type": "DatasetReference"
					},
					"name": "AzureSQL"
				},
				{
					"dataset": {
						"referenceName": "DS_CovidMetrics",
						"type": "DatasetReference"
					},
					"name": "OnPrem"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLGeography_CSV",
						"type": "DatasetReference"
					},
					"name": "azure"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLGeography_CSV",
						"type": "DatasetReference"
					},
					"name": "geoonpremsql"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSql",
						"type": "DatasetReference"
					},
					"name": "StageInODS"
				},
				{
					"dataset": {
						"referenceName": "AzureSql",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "AddSourceFlag"
				},
				{
					"name": "AddSrcflag"
				},
				{
					"name": "Union1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "Union2"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "Window1"
				}
			],
			"script": "source(output(\n\t\tID as string,\n\t\tUpdated as string,\n\t\tConfirmed as string,\n\t\tConfirmed_Change as string,\n\t\tDeaths as string,\n\t\tDeaths_Change as string,\n\t\tRecovered as string,\n\t\tRecovered_Change as string,\n\t\tLatitude as string,\n\t\tLongitude as string,\n\t\tISO2 as string,\n\t\tISO3 as string,\n\t\tCountry_Region as string,\n\t\tload_time as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> AzureSQL\nsource(output(\n\t\tID as string,\n\t\tUpdated as string,\n\t\tConfirmed as string,\n\t\tConfirmed_Change as string,\n\t\tDeaths as string,\n\t\tDeaths_Change as string,\n\t\tRecovered as string,\n\t\tRecovered_Change as string,\n\t\tLatitude as string,\n\t\tLongitude as string,\n\t\tISO2 as string,\n\t\tISO3 as string,\n\t\tCountry_Region as string,\n\t\tload_time as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> OnPrem\nsource(output(\n\t\tCountry as string,\n\t\tCountryCode as string,\n\t\tLatitude as string,\n\t\tLongitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> azure\nsource(output(\n\t\tCountry as string,\n\t\tCountryCode as string,\n\t\tLatitude as string,\n\t\tLongitude as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> geoonpremsql\nAzureSQL derive(Source = \"AzureSQL\",\n\tpartitionBy('hash', 1)) ~> AddSourceFlag\nOnPrem derive(Source = \"OnPrem\",\n\tpartitionBy('hash', 1)) ~> AddSrcflag\nAddSourceFlag, AddSrcflag union(byName: true,\n\tpartitionBy('hash', 1))~> Union1\nazure derive(source = \"AzureSQL\") ~> DerivedColumn1\ngeoonpremsql derive(source = \"OnPrem\") ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 union(byName: true,\n\tpartitionBy('hash', 1))~> Union2\nWindow1 filter(RowVersion==1) ~> Filter1\nFilter1 alterRow(upsertIf(isNull(CountryCode)==false())) ~> AlterRow1\nUnion2 window(over(CountryCode),\n\tasc(source, true),\n\tRowVersion = denseRank()) ~> Window1\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tDate as date,\n\t\tCountryCode as string,\n\t\tCountryName as string,\n\t\tConfirmed as integer,\n\t\tConfirmed_Change as integer,\n\t\tRecovered as integer,\n\t\tRecovered_Change as integer,\n\t\tDeaths as integer,\n\t\tDeathsChange as integer,\n\t\tLoadTime as timestamp,\n\t\tSource as string,\n\t\tETLCreatedDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tID,\n\t\tDate = Updated,\n\t\tConfirmed,\n\t\tConfirmed_Change,\n\t\tDeaths,\n\t\tDeathsChange = Deaths_Change,\n\t\tRecovered,\n\t\tRecovered_Change,\n\t\tCountryCode = ISO3,\n\t\tCountryName = Country_Region,\n\t\tLoadTime = load_time,\n\t\tSource\n\t)) ~> StageInODS\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID as integer,\n\t\tDate as date,\n\t\tCountryCode as string,\n\t\tCountryName as string,\n\t\tConfirmed as integer,\n\t\tConfirmed_Change as integer,\n\t\tRecovered as integer,\n\t\tRecovered_Change as integer,\n\t\tDeaths as integer,\n\t\tDeathsChange as integer,\n\t\tLoadTime as timestamp,\n\t\tSource as string,\n\t\tETLCreatedDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['CountryCode'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}